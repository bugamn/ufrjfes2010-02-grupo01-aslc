Módulo Controllers
EstacoesController
F.: cria
Ei.: [nome, capacidade]
Si.: cria Estação[id, nome, capacidade]


F.: remove
Ei.: [id]
Si.: nao existe mais Estação identificada por id


F.: consulta
Ei.: [nomeBusca (regex), capacidadeBusca (regex)]
Si.: lista de estações que sejam qualificadas pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão


F.: detalha
Ei.: [id]
Si.: Estação identificada por id


F.: edita
Ei.: [id, nome, capacidade]
Si.: modifica Estação identificada por id para ter [nome e capacidade] fornecidos


F.: listaBicicletas
Ei.: [id, placaBusca (regex), tipoBusca (regex), estacaoBusca (regex)]
Si.: lista de bicicletas associadas a estação id que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão



BicicletasController
F.: criar
Ei.: [placa, tipo, estacao]
Si.: cria Bicicleta[id, placa, tipo] na Estacao estacao


F.: remove
Ei.: [id]
Si.: não existe mais Bicicleta identificada por id


F.: consulta
Ei.: [placaBusca (regex), tipoBusca (regex), estacaoBusca (regex)]
Si.: lista de bicicletas que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão


F.: detalha
Ei.: [id]
Si.: Bicicleta identificada por id


F.: editar
Ei.: [id, placa, tipo]
Si.: modifica Bicicleta identificada por id para ter [placa e tipo] fornecidos



UsuariosController
F.: cria
Ei.: [nome, cpf, endereço, permissao]
Si.: cria Usuario[id, nome, cpf, endereço, permissao]


F.: remove
Ei.: [id]
Si.: não existe mais Usuario identificado por id


F.: consulta
Ei.: [nomeBusca (regex), cpfBusca (regex), endereçoBusca (regex), permissaoBusca (regex)]
Si.: lista de usuários que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão


F.: detalha
Ei.: [id]
Si.: Usuário identificado por id


F.: edita
Ei.: [id, nome, cpf, endereço, permissao]
Si.: modifica Usuario identificado por id para ter [nome, cpf, endereço e permissao] fornecidos



ReservasController
F.: cria
Ei.: [estacao, usuario, destino, dataHora]
Si.: cria Reserva[id, estacao, bicicleta, usuario, destino, dataHora]


F.: remove
Ei.: [id]
Si.: nao existe mais Locacao identificada por id


F.: consulta
Ei.: [estacaoBusca (regex), bicicletaBusca (regex), usuarioBusca (regex), destinoBusca (regex), dataHoraBusca (regex)]
Si.: lista de locacoes que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão


F.: detalha
Ei.: [id]
Si.: Locao identificada por id


F.: edita
Ei.: [id, estacao, bicicleta, usuario, destino, dataHora]
Si.: modifica Locacao identificada por id para ter [estacao, bicicleta, usuario, destino e dataHora] fornecidos



LocacoesController
F.: cria
Ei.: [estacao, bicicleta, usuario, destino]
Si.: cria Locacao[id, estacao, bicicleta, usuario, destino]


F.: remove
Ei.: [id]
Si.: nao existe mais Locacao identificada por id


F.: consulta
Ei.: [estacaoBusca (regex), bicicletaBusca (regex), usuarioBusca (regex), destinoBusca (regex)]
Si.: lista de locacoes que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão


F.: detalha
Ei.: [id]
Si.: Locao identificada por id


F.: edita
Ei.: [id, estacao, bicicleta, usuario, destino]
Si.: modifica Locacao identificada por id para ter [estacao, bicicleta, usuario e destino] fornecidos




Módulo Modelo
EstacaoDao
F.: criar
Ei.: [nome, capacidade]
Si.: cria Estação[id, nome, capacidade]


F.: remover
Ei.: [id]
Si.: nao existe mais Estação identificada por id


F.: listar
Ei.: [nomeBusca (regex), capacidadeBusca (regex)]
Si.: lista de estações que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão


F.: encontrar
Ei.: [id]
Si.: Estação identificada por id


F.: editar
Ei.: [id, nome, capacidade]
Si.: modifica Estação identificada por id para ter [nome e capacidade] fornecidos


F.: listarBicicletas
Ei.: [id, placaBusca (regex), tipoBusca (regex), estacaoBusca (regex)]
Si.: lista de bicicletas associadas a estação id que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão



BicicletaDao
F.: criar
Ei.: [placa, tipo, estacao]
Si.: cria Bicicleta[id, placa, tipo] na Estacao estacao


F.: remover
Ei.: [id]
Si.: não existe mais Bicicleta identificada por id


F.: listar
Ei.: [placaBusca (regex), tipoBusca (regex), estacaoBusca (regex)]
Si.: lista de bicicletas que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão


F.: encontrar
Ei.: [id]
Si.: Bicicleta identificada por id


F.: editar
Ei.: [id, placa, tipo]
Si.: modifica Bicicleta identificada por id para ter [placa e tipo] fornecidos



UsuarioDao
F.: criar
Ei.: [nome, cpf, endereço, permissao]
Si.: cria Usuario[id, nome, cpf, endereço, permissao]


F.: remover
Ei.: [id]
Si.: não existe mais Usuario identificado por id


F.: listar
Ei.: [nomeBusca (regex), cpfBusca (regex), endereçoBusca (regex), permissaoBusca (regex)]
Si.: lista de usuários que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão


F.: encontrar
Ei.: [id]
Si.: Usuário identificado por id


F.: editar
Ei.: [id, nome, cpf, endereço, permissao]
Si.: modifica Usuario identificado por id para ter [nome, cpf, endereço e permissao] fornecidos



ReservaDao
F.: criar
Ei.: [estacao, usuario, destino, dataHora]
Si.: cria Reserva[id, estacao, bicicleta, usuario, destino, dataHora]


F.: remover
Ei.: [id]
Si.: nao existe mais Locacao identificada por id


F.: listar
Ei.: [estacaoBusca (regex), bicicletaBusca (regex), usuarioBusca (regex), destinoBusca (regex), dataHoraBusca (regex)]
Si.: lista de locacoes que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão


F.: encontrar
Ei.: [id]
Si.: Locao identificada por id


F.: editar
Ei.: [id, estacao, bicicleta, usuario, destino, dataHora]
Si.: modifica Locacao identificada por id para ter [estacao, bicicleta, usuario, destino e dataHora] fornecidos



LocacaoDao
F.: criar
Ei.: [estacao, bicicleta, usuario, destino, dataHora]
Si.: cria Locacao[id, estacao, bicicleta, usuario, destino, dataHora]


F.: remover
Ei.: [id]
Si.: nao existe mais Locacao identificada por id


F.: listar
Ei.: [estacaoBusca (regex), bicicletaBusca (regex), usuarioBusca (regex), destinoBusca (regex), dataHoraBusca (regex)]
Si.: lista de locacoes que sejam qualificados pelas expressões regulares - as expressões regulares devem aceitar qualquer valor por padrão


F.: encontrar
Ei.: [id]
Si.: Locao identificada por id


F.: editar
Ei.: [id, estacao, bicicleta, usuario, destino, dataHora]
Si.: modifica Locacao identificada por id para ter [estacao, bicicleta, usuario, destino e dataHora] fornecidos




Estacao
construtor
F.: construtor
Ei.: [nome, capacidade]
Si.: retorna Estação[id, nome, capacidade]


F.: getId
Ei.: [void]
Si.: id


F.: setId
Ei.: [i]
Si.: muda o valor do atributo id para i


F.: getNome
Ei.: [void]
Si.: nome


F.: setNome
Ei.: [n]
Si.: muda o valor do atributo nome para n


F.: getCapacidade
Ei.: [void]
Si.: capacidade


F.: setCapacidade
Ei.: [c]
Si.: muda o valor do atributo capacidade para c



Bicicleta
F.: construtor
Ei.: [placa, tipo, estacao]
Si.: cria Bicicleta[id, placa, tipo] na Estacao estacao


F.: getId
Ei.: [void]
Si.: id


F.: setId
Ei.: [i]
Si.: muda o valor do atributo id para i


F.: getPlaca
Ei.: [void]
Si.: placa


F.: setPlaca
Ei.: [p]
Si.: muda o valor do atributo placa para p


F.: getTipo
Ei.: [void]
Si.: tipo


F.: setTipo
Ei.: [t]
Si.: muda o valor do atributo tipo para t


F.: getEstacao
Ei.: [void]
Si.: estacao


F.: setEstacao
Ei.: [e]
Si.: muda o valor do atributo estacao para e



Usuario
F.: construtor
Ei.: [nome, cpf, endereço]
Si.: cria Usuario[id, nome, cpf, endereço]


F.: getId
Ei.: [void]
Si.: id


F.: setId
Ei.: [i]
Si.: muda o valor do atributo id para i


F.: getNome
Ei.: [void]
Si.: nome


F.: setNome
Ei.: [n]
Si.: muda o valor do atributo nome para n


F.: getCpf
Ei.: [void]
Si.: cpf


F.: setCpf
Ei.: [c]
Si.: muda o valor do atributo cpf para c


F.: getEndereco
Ei.: [void]
Si.: endereco


F.: setEndereco
Ei.: [e]
Si.: muda o valor do atributo endereco para e


F.: getPermissao
Ei.: [void]
Si.: permissao


F.: setPermissao
Ei.: [p]
Si.: muda o valor do atributo permissao para p



Reserva
F.: construtor
Ei.: [estacao, usuario, destino, dataHora]
Si.: cria Reserva[id, estacao, bicicleta, usuario, destino, dataHora]


F.: getId
Ei.: [void]
Si.: id


F.: setId
Ei.: [i]
Si.: muda o valor do atributo id para i


F.: getEstacao
Ei.: [void]
Si.: estacao


F.: setEstacao
Ei.: [e]
Si.: muda o valor do atributo estacao para e


F.: getUsuario
Ei.: [void]
Si.: usuario


F.: setUsuario
Ei.: [u]
Si.: muda o valor do atributo usuario para u


F.: getDestino
Ei.: [void]
Si.: destino


F.: setDestino
Ei.: [d]
Si.: muda o valor do atributo dataHora para d


F.: getDataHora
Ei.: [void]
Si.: DataHora


F.: setDataHora
Ei.: [dh]
Si.: muda o valor do atributo dataHora para dh



Locacao
F.: construtor
Ei.: [estacao, usuario, destino, dataHora]
Si.: cria Reserva[id, estacao, bicicleta, usuario, destino, dataHora]


F.: getId
Ei.: [void]
Si.: id


F.: setId
Ei.: [i]
Si.: muda o valor do atributo id para i


F.: getEstacao
Ei.: [void]
Si.: estacao


F.: setEstacao
Ei.: [e]
Si.: muda o valor do atributo estacao para e


F.: getUsuario
Ei.: [void]
Si.: usuario


F.: setUsuario
Ei.: [u]
Si.: muda o valor do atributo usuario para u


F.: getDestino
Ei.: [void]
Si.: destino


F.: setDestino
Ei.: [d]
Si.: muda o valor do atributo dataHora para d


F.: getDataHora
Ei.: [void]
Si.: DataHora


F.: setDataHora
Ei.: [dh]
Si.: muda o valor do atributo dataHora para dh



Stubs: Classes terminadas em Dao serão para acesso do banco de dados. Podemos criar stubs delas que usem uma fila temporária para poder testar as outras classes.
